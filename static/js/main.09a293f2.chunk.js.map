{"version":3,"sources":["InfoModal.js","Map/County.js","Map/Township.js","Map/Village.js","Map/Map.js","Map/index.js","Map/MapManager.js","App.js","serviceWorker.js","index.js"],"names":["InfoModal","_ref","info","react_default","a","createElement","className","name","data","description","Path","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateColor","color","setState","MapManager","getData","code","getColor","state","onSubscribe","_this$props","county","path","setInfo","clearSelectedCounty","zoomInSelectedCounty","setSelectedInfo","_this$state","id","data-code","fill","stroke","strokeWidth","d","onMouseOver","onClick","PureComponent","County","getProperties","properties","_this2","country","key","COUNTYNAME","COUNTYCODE","_this3","_this$props2","topoData","features","map","i","County_Path","town","clearSelectedTown","zoomInSelectedTown","_town$properties","TOWNNAME","data-county","style","opacity","display","Township","TOWNCODE","Township_Path","village","clearSelectedVillage","zoomInSelectedVillage","_village$properties","VILLNAME","data-town","Village","VILLCODE","Village_Path","Map","dealwithCountyData","topoCounty","arguments","length","undefined","counties","county_template","forEach","c","_c$properties","push","county_code","setCountyData","county_name","county_data","parseInt","Math","random","concat","county_description","_c$properties2","dealwithTownshipData","topoTownship","towns","township_template","t","_t$properties","township_code","setTownshipData","township_name","township_data","township_description","_t$properties2","dealwithVillageData","topoVillage","villages","village_template","v","_v$properties","setVillageData","village_code","village_name","village_data","village_description","_v$properties2","writeTemplateToFile","filename","objectData","document","download","href","encodeURIComponent","JSON","stringify","target","body","appendChild","click","removeChild","initialMapSouces","width","height","setDatas","loading","init","__webpack_require__","e","then","bind","krProvince","krMunicipality","krSubMunicipality","topojson","objects","skorea_provinces_2018_geo","skorea_municipalities_2018_geo","skorea_submunicipalities_2018_geo","_this$dealwithCountyD","_this$dealwithTownshi","_this$dealwithVillage","prj","geoMercator","center","translate","scale","geoPath","projection","select","mapRef","on","throttle","wheelEvent","catch","err","console","log","_ref2","twVillage","twTownship","twCounty","_this$dealwithCountyD2","_this$dealwithTownshi2","_this$dealwithVillage2","selectedCounty","selection","tmpSelectedCounty","attr","transition","duration","selectedTown","tmpSelectedTown","selectedVillage","animate","dataCode","element","selectAll","parentNode","zoomAnimate","_this$state2","bounds","x","y","max","zoom","transform","zoomIdentity","zoomEvent","event","zoom_fit","zoom_out","deltaY","exportToPNG","saveSvgAsPng","goto_county","targetCounty","filter","goto_township","_this$state3","targetTown","indexOf","goto_village","_this$state4","_this$props3","targetVillage","clientWidth","clientHeight","nextProps","nextState","_this$props4","_this$state5","ref","Map_County","Map_Township","Map_Village","Component","defaultProps","pathColorUpdater","colorLightest","colorDeepest","colorScale","scaleLinear","domain","range","clamp","clear","set","type","get","set_county_data","targetData","objectSpread","colorUpdater","set_county_description","set_township_data","set_township_description","set_village_data","set_village_description","value","setColor","min","lightest","deepest","_ref3","App","selectedCountry","selectedInfo","countyForm","townshipForm","villageForm","changeCountry","countrySelect","onCountySelect","parse","onTownSelect","onVillageSelect","toCounty","_MapManager$getData","getCountyData","alert","countyData","getCountyDescription","setCountyDescription","countyDescription","toTown","_MapManager$getData4","getTownshipData","townshipData","getTownshipDescription","setTownshipDescription","townshipDescription","toVillage","_MapManager$getData7","getVillageData","villageData","getVillageDescription","setVillageDescription","villageDescription","backToTopLevel","_MapManager$getData10","_MapManager$getData11","_MapManager$getData12","setDefatValue","_MapManager$getData13","_MapManager$getData14","_MapManager$getData15","deepestColor","lightestColor","flex","src_Map","defaultValue","countySelect","onChange","townSelect","scounty","villageSelect","stown","placeholder","keys","InfoModal_InfoModal","Boolean","window","location","hostname","match","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.09a293f2.chunk.js","sourcesContent":["import React from 'react';\n\nexport const InfoModal = ({ info }) => {\n  // console.log(info);\n  if (info === null) {\n    return null\n  }\n  return (\n    <div className=\"infoModal\">\n      <p className=\"name\">{info.name}</p>\n      <p className=\"data\">{info.data}</p>\n      <p className=\"description\">{info.description}</p>\n    </div>\n  )\n}","import React, { PureComponent } from 'react';\nimport { MapManager } from './index';\n\nclass Path extends PureComponent {\n  constructor(props) {\n    super(props);\n    const { data } = MapManager.getData('county', props.code);\n    const color = MapManager.getColor(data);\n    this.state = {\n      color\n    }\n  }\n  componentDidMount() {\n    const { code } = this.props;\n    MapManager.onSubscribe(code, this.updateColor)\n  }\n  updateColor = (color) => {\n    this.setState({\n      color\n    })\n  }\n  render() {\n    const {\n      county,\n      path,\n      code,\n      setInfo,\n      clearSelectedCounty,\n      zoomInSelectedCounty,\n      setSelectedInfo\n    } = this.props;\n\n    const { name, color } = this.state;\n\n    return (\n      <g\n        id={name}\n        data-code={code}\n        className='county'\n      >\n        <path\n          fill={color}\n          stroke='white'\n          strokeWidth={0.2}\n          d={path(county)}\n          onMouseOver={() => {\n            setInfo('county', code);\n          }}\n          onClick={() => {\n            setSelectedInfo('county', code);\n            clearSelectedCounty();\n            zoomInSelectedCounty(county);\n          }}\n        />\n      </g>\n    )\n  }\n}\nclass County extends PureComponent {\n  getProperties = (properties) => {\n    const { country } = this.props;\n    switch (country) {\n      case 'kr':\n        const { name, code } = properties;\n        return {\n          key: code,\n          name\n        }\n      case 'tw':\n      default:\n        const { COUNTYNAME, COUNTYCODE } = properties;\n        return {\n          key: COUNTYCODE,\n          name: COUNTYNAME,\n        }\n    }\n  }\n  render() {\n    const {\n      topoData,\n      path,\n      setInfo,\n      clearSelectedCounty,\n      zoomInSelectedCounty,\n      setSelectedInfo\n    } = this.props;\n\n    return (\n      <g className='countyContainer'>\n        {\n          topoData.features.map((county, i) => {\n            const { key } = this.getProperties(county.properties)\n            return (\n              <Path\n                key={key}\n                code={key}\n                county={county}\n                path={path}\n                setInfo={setInfo}\n                clearSelectedCounty={clearSelectedCounty}\n                zoomInSelectedCounty={zoomInSelectedCounty}\n                setSelectedInfo={setSelectedInfo}\n              />\n            )\n          })\n        }\n      </g>\n    );\n  }\n}\n\nexport default County;","import React, { PureComponent } from 'react';\nimport { MapManager } from './index';\n\nclass Path extends PureComponent {\n  constructor(props) {\n    super(props);\n    const { data } = MapManager.getData('township', props.code);\n    const color = MapManager.getColor(data);\n    this.state = {\n      color\n    }\n  }\n  componentDidMount() {\n    const { code } = this.props;\n    MapManager.onSubscribe(code, this.updateColor)\n  }\n  updateColor = (color) => {\n    this.setState({\n      color\n    })\n  }\n  render() {\n    const {\n      town,\n      path,\n      code,\n      setInfo,\n      clearSelectedTown,\n      zoomInSelectedTown,\n      setSelectedInfo,\n    } = this.props;\n    const { TOWNNAME, COUNTYNAME } = town.properties;\n\n    const { color } = this.state;\n\n    return (\n      <g\n        id={TOWNNAME}\n        data-code={code}\n        data-county={COUNTYNAME}\n        className='town'\n        style={{\n          opacity: 0,\n          display: 'none'\n        }}\n      >\n        <path\n          fill={color}\n          stroke='white'\n          strokeWidth={0.05}\n          d={path(town)}\n          onMouseOver={() => {\n            setInfo('township', code);\n          }}\n          onClick={() => {\n            setSelectedInfo('township', code);\n            clearSelectedTown();\n            zoomInSelectedTown(town)\n          }}\n        />\n      </g>\n    )\n  }\n}\n\nclass Township extends PureComponent {\n  getProperties = (properties) => {\n    const { country } = this.props;\n    switch (country) {\n      case 'kr':\n        const { name, code } = properties;\n        return {\n          key: code,\n          name\n        }\n      case 'tw':\n      default:\n        const { TOWNNAME, TOWNCODE } = properties;\n        return {\n          key: TOWNCODE,\n          name: TOWNNAME,\n        }\n    }\n  }\n  render() {\n    const {\n      topoData,\n      path,\n      setInfo,\n      clearSelectedTown,\n      zoomInSelectedTown,\n      setSelectedInfo,\n    } = this.props;\n    return (\n      <g className='townContainer'>\n        {\n          topoData.features.map((town, i) => {\n            const { key } = this.getProperties(town.properties);\n            return (\n\n              <Path\n                key={key}\n                code={key}\n                town={town}\n                path={path}\n                setInfo={setInfo}\n                clearSelectedTown={clearSelectedTown}\n                zoomInSelectedTown={zoomInSelectedTown}\n                setSelectedInfo={setSelectedInfo}\n              />\n            )\n          })\n        }\n      </g>\n    );\n  }\n}\n\nexport default Township;","import React, { PureComponent } from 'react';\nimport { MapManager } from './index';\n\nclass Path extends PureComponent {\n  constructor(props) {\n    super(props);\n    const { data } = MapManager.getData('village', props.code);\n    const color = MapManager.getColor(data);\n    this.state = {\n      color\n    }\n  }\n  componentDidMount() {\n    const { code } = this.props;\n    MapManager.onSubscribe(code, this.updateColor)\n  }\n  updateColor = (color) => {\n    this.setState({\n      color\n    })\n  }\n  render() {\n    const {\n      village,\n      path,\n      code,\n      setInfo,\n      clearSelectedVillage,\n      zoomInSelectedVillage,\n      setSelectedInfo,\n    } = this.props;\n    const { VILLNAME, TOWNNAME, COUNTYNAME } = village.properties;\n    const { color } = this.state;\n    return (\n      <g\n        id={VILLNAME}\n        data-code={code}\n        data-town={TOWNNAME}\n        data-county={COUNTYNAME}\n        className='village'\n        style={{\n          opacity: 0,\n          display: 'none',\n        }}\n      >\n        <path\n          fill={color}\n          stroke='white'\n          strokeWidth={0.05}\n          d={path(village)}\n          onMouseOver={() => {\n            setInfo('village', code);\n          }}\n          onClick={() => {\n            setSelectedInfo('village', code);\n            clearSelectedVillage();\n            zoomInSelectedVillage(village);\n          }}\n        />\n      </g>\n    )\n  }\n}\n\nclass Village extends PureComponent {\n  getProperties = (properties) => {\n    const { country } = this.props;\n    switch (country) {\n      case 'kr':\n        const { name, code } = properties;\n        return {\n          key: code,\n          name\n        }\n      case 'tw':\n      default:\n        const { VILLNAME, VILLCODE } = properties;\n        return {\n          key: VILLCODE,\n          name: VILLNAME,\n        }\n    }\n  }\n  render() {\n    const {\n      topoData,\n      path,\n      setInfo,\n      clearSelectedVillage,\n      zoomInSelectedVillage,\n      setSelectedInfo\n    } = this.props;\n\n    return (\n      <g className='villageContainer'>\n        {\n          topoData.features.map((village, i) => {\n            const { key } = this.getProperties(village.properties);\n\n            return (\n              <Path\n                key={key}\n                code={key}\n                village={village}\n                path={path}\n                setInfo={setInfo}\n                clearSelectedVillage={clearSelectedVillage}\n                zoomInSelectedVillage={zoomInSelectedVillage}\n                setSelectedInfo={setSelectedInfo}\n              />\n            )\n          })\n        }\n      </g>\n    );\n  }\n}\n\nexport default Village;","import React, { Component } from 'react';\nimport * as topojson from 'topojson';\nimport { zoom, zoomIdentity } from 'd3-zoom';\nimport { select, event } from 'd3-selection';\nimport { geoPath, geoMercator } from 'd3-geo';\nimport { saveSvgAsPng } from 'save-svg-as-png';\nimport throttle from 'lodash.throttle';\n\nimport County from './County';\nimport Township from './Township';\nimport Village from './Village';\n\nimport { MapManager } from './index';\n\n\nexport default class Map extends Component {\n  static defaultProps = {\n    country: 'tw'\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.selectedCounty = {\n      selection: [],\n      element: null\n    };\n    this.selectedTown = {\n      selection: [],\n      element: null\n    };\n    this.selectedVillage = {\n      selection: null,\n      element: null\n    };\n\n    const width = (document.body.clientWidth / 3) * 2 - 10;\n    const height = document.body.clientHeight;\n\n    this.zoom = zoom().on('zoom', this.zoomEvent);\n\n    this.state = {\n      width,\n      height,\n      center: [width / 2, height / 2],\n      loading: true\n    }\n  }\n  dealwithCountyData = (country, topoCounty, data = []) => {\n    const counties = [];\n    const county_template = [];\n    switch (country) {\n      case 'kr':\n        topoCounty.features.forEach((c, i) => {\n          const { name, code } = c.properties;\n          /**\n           * 此為 app.js 內 縣市 的select 資料\n           */\n          counties.push({\n            name,\n            code\n          });\n          /**\n           * 未傳入data值 或是 data順序亂掉 導致code不對應\n           * 會進入 demo 模式(自動產生隨機資料)\n           */\n          if (data.length !== 0 && data[i].county_code === code) {\n            MapManager.setCountyData(code, {\n              name: data[i].county_name,\n              data: data[i].county_data,\n              description: data[i].description\n            })\n          } else {\n            MapManager.setCountyData(code, {\n              name: name,\n              data: parseInt(Math.random() * 100, 10),\n              description: `我是 ${name} 的描述內容`\n            })\n          }\n          /**\n           * 此為 預設資料模板\n           * 方便輸出為json\n           */\n          county_template.push({\n            county_name: name,\n            county_code: code,\n            county_data: 0,\n            county_description: ''\n          })\n        });\n        break;\n      case 'tw':\n      default:\n        topoCounty.features.forEach((c, i) => {\n          const { COUNTYNAME, COUNTYCODE } = c.properties;\n          /**\n           * 此為 app.js 內 縣市 的select 資料\n           */\n          counties.push({\n            name: COUNTYNAME,\n            code: COUNTYCODE\n          })\n          /**\n           * 未傳入data值 或是 data順序亂掉 導致code不對應\n           * 會進入 demo 模式(自動產生隨機資料)\n           */\n          if (data.length !== 0 && data[i].county_code === COUNTYCODE) {\n            MapManager.setCountyData(COUNTYCODE, {\n              name: data[i].county_name,\n              data: data[i].county_data,\n              description: data[i].description\n            })\n          } else {\n            MapManager.setCountyData(COUNTYCODE, {\n              name: COUNTYNAME,\n              data: parseInt(Math.random() * 100, 10),\n              description: `我是 ${COUNTYNAME} 的描述內容`\n            })\n          }\n          /**\n           * 此為 預設資料模板\n           * 方便輸出為json\n           */\n          county_template.push({\n            county_name: COUNTYNAME,\n            county_code: COUNTYCODE,\n            county_data: 0,\n            county_description: ''\n          })\n        });\n        break;\n    }\n    return {\n      counties,\n      county_template\n    }\n  }\n  dealwithTownshipData = (country, topoTownship, data = []) => {\n    const towns = [];\n    const township_template = [];\n    switch (country) {\n      case 'kr':\n        topoTownship.features.forEach((t, i) => {\n          const { name, code } = t.properties;\n          /**\n           * 此為 app.js 內 鄉鎮區 的select 資料\n           */\n          towns.push({\n            name,\n            code\n          });\n          /**\n           * 未傳入data值 或是 data順序亂掉 導致code不對應\n           * 會進入 demo 模式(自動產生隨機資料)\n           */\n          if (data.length !== 0 && data[i].township_code === code) {\n            MapManager.setTownshipData(code, {\n              name: data[i].township_name,\n              data: data[i].township_data,\n              description: data[i].township_description\n            })\n          } else {\n            MapManager.setTownshipData(code, {\n              name: name,\n              data: parseInt(Math.random() * 100, 10),\n              description: `我是 ${name} 的描述內容`\n            })\n          }\n          /**\n           * 此為 預設資料模板\n           * 方便輸出為json\n           */\n          township_template.push({\n            township_name: name,\n            township_code: code,\n            township_data: 0,\n            township_description: ''\n          })\n        });\n        break;\n      case 'tw':\n      default:\n        topoTownship.features.forEach((t, i) => {\n          const { TOWNNAME, COUNTYNAME, TOWNCODE } = t.properties;\n          /**\n           * 此為 app.js 內 鄉鎮區 的select 資料\n           */\n          towns.push({\n            name: TOWNNAME,\n            code: TOWNCODE\n          });\n          /**\n           * 未傳入data值 或是 data順序亂掉 導致code不對應\n           * 會進入 demo 模式(自動產生隨機資料)\n           */\n          if (data.length !== 0 && data[i].township_code === TOWNCODE) {\n            MapManager.setTownshipData(TOWNCODE, {\n              name: data[i].township_name,\n              data: data[i].township_data,\n              description: data[i].township_description\n            })\n          } else {\n            MapManager.setTownshipData(TOWNCODE, {\n              name: TOWNNAME,\n              data: parseInt(Math.random() * 100, 10),\n              description: `我是 ${COUNTYNAME}${TOWNNAME} 的描述內容`\n            })\n          }\n          /**\n           * 此為 預設資料模板\n           * 方便輸出為json\n           */\n          township_template.push({\n            township_name: TOWNNAME,\n            township_code: TOWNCODE,\n            township_data: 0,\n            township_description: ''\n          })\n        });\n        break;\n    }\n    return {\n      towns,\n      township_template\n    }\n  }\n  dealwithVillageData = (country, topoVillage, data = []) => {\n    const villages = [];\n    const village_template = [];\n\n    switch (country) {\n      case 'kr':\n        topoVillage.features.forEach((v, i) => {\n          const { name, code } = v.properties;\n          /**\n           * 此為 app.js 內 村里 的select 資料\n           */\n          villages.push({\n            name,\n            code\n          });\n          MapManager.setVillageData(code, {\n            name: name,\n            data: parseInt(Math.random() * 100, 10),\n            description: `我是 ${name} 的描述內容`\n          })\n          /**\n           * 未傳入data值 或是 data順序亂掉 導致code不對應\n           * 會進入 demo 模式(自動產生隨機資料)\n           */\n          if (data.length !== 0 && data[i].village_code === code) {\n            MapManager.setVillageData(code, {\n              name: data[i].village_name,\n              data: data[i].village_data,\n              description: data[i].village_description\n            })\n          } else {\n            MapManager.setVillageData(code, {\n              name: name,\n              data: parseInt(Math.random() * 100, 10),\n              description: `我是 ${name} 的描述內容`\n            })\n          }\n          /**\n           * 此為 預設資料模板\n           * 方便輸出為json\n           */\n          village_template.push({\n            village_name: name,\n            village_code: code,\n            village_data: 0,\n            village_description: ''\n          })\n        });\n        break;\n      case 'tw':\n      default:\n        topoVillage.features.forEach((v, i) => {\n          const { VILLNAME, TOWNNAME, COUNTYNAME, VILLCODE } = v.properties;\n          /**\n           * 此為 app.js 內 村里 的select 資料\n           */\n          villages.push({\n            name: VILLNAME,\n            code: VILLCODE\n          });\n          /**\n           * 未傳入data值 或是 data順序亂掉 導致code不對應\n           * 會進入 demo 模式(自動產生隨機資料)\n           */\n          if (data.length !== 0 && data[i].village_code === VILLCODE) {\n            MapManager.setVillageData(VILLCODE, {\n              name: data[i].village_name,\n              data: data[i].village_data,\n              description: data[i].village_description\n            })\n          } else {\n            MapManager.setVillageData(VILLCODE, {\n              name: VILLNAME,\n              data: parseInt(Math.random() * 100, 10),\n              description: `我是 ${COUNTYNAME}${TOWNNAME}${VILLNAME} 的描述內容`\n            })\n          }\n          /**\n           * 此為 預設資料模板\n           * 方便輸出為json\n           */\n          village_template.push({\n            village_name: VILLNAME,\n            village_code: VILLCODE,\n            village_data: 0,\n            village_description: ''\n          })\n        });\n        break;\n    }\n    return {\n      villages,\n      village_template\n    }\n  }\n  /**\n   *  export data template json file\n   */\n  writeTemplateToFile = (filename, objectData) => {\n    let contentType = \"application/json;charset=utf-8;\";\n    const a = document.createElement('a');\n    a.download = filename;\n    a.href = 'data:' + contentType + ',' + encodeURIComponent(JSON.stringify(objectData));\n    a.target = '_blank';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n  }\n  initialMapSouces = (country) => {\n    const { width, height } = this.state;\n    const { setDatas } = this.props;\n\n    this.setState({\n      loading: true\n    }, () => {\n      MapManager.init()\n      switch (country) {\n        case 'kr':\n          import('../assets/South Korea/MapSources')\n            .then(({ krProvince, krMunicipality, krSubMunicipality }) => {\n              const topoCounty = topojson.feature(krProvince, krProvince.objects.skorea_provinces_2018_geo);\n              const topoTownship = topojson.feature(krMunicipality, krMunicipality.objects.skorea_municipalities_2018_geo);\n              const topoVillage = topojson.feature(krSubMunicipality, krSubMunicipality.objects.skorea_submunicipalities_2018_geo);\n\n              const { counties, county_template } = this.dealwithCountyData(country, topoCounty);\n              const { towns, township_template } = this.dealwithTownshipData(country, topoTownship);\n              const { villages, village_template } = this.dealwithVillageData(country, topoVillage);\n\n              /**\n               * 此為 輸出 data模板的method\n               * 取消註解 重新整理頁面\n               * 會在一開始時 就跑出下載的視窗\n               */\n              // this.writeTemplateToFile('county_data', county_template)\n              // this.writeTemplateToFile('township_data', township_template)\n              // this.writeTemplateToFile('village_data', village_template)\n\n              setDatas({\n                counties: counties,\n                towns: towns,\n                villages: villages\n              });\n\n              const center = [128, 36];\n              const scale = 7000;\n              const prj = geoMercator().center(center).translate([width / 2, height / 2]).scale(scale);\n              this.path = geoPath().projection(prj);\n\n              this.setState({\n                loading: false,\n                topoCounty: topoCounty,\n                topoTownship: topoTownship,\n                topoVillage: topoVillage\n              }, () => {\n                select(this.mapRef)\n                  .on('wheel', throttle(this.wheelEvent, 400));\n              })\n            })\n            .catch(err => {\n              console.log(err);\n              // Handle failure\n            });\n\n          break;\n        case 'tw':\n        default:\n          import('../assets/Taiwan/MapSources')\n            .then(({\n              twVillage,\n              twTownship,\n              twCounty,\n              county_data,\n              township_data,\n              village_data\n            }) => {\n              const topoCounty = topojson.feature(twCounty, twCounty.objects.county);\n              const topoVillage = topojson.feature(twVillage, twVillage.objects.village);\n              const topoTownship = topojson.feature(twTownship, twTownship.objects.town);\n              const { counties, county_template } = this.dealwithCountyData(country, topoCounty, county_data);\n              const { towns, township_template } = this.dealwithTownshipData(country, topoTownship, township_data);\n              const { villages, village_template } = this.dealwithVillageData(country, topoVillage, village_data);\n\n              /**\n               * 此為 輸出 data模板的method\n               * 取消註解 重新整理頁面\n               * 會在一開始時 就跑出下載的視窗\n               */\n              // this.writeTemplateToFile('county_data', county_template)\n              // this.writeTemplateToFile('township_data', township_template)\n              // this.writeTemplateToFile('village_data', village_template)\n\n              setDatas({\n                counties: counties,\n                towns: towns,\n                villages: villages\n              });\n\n              const center = [121, 23.9];\n              const scale = 10000;\n              const prj = geoMercator().center(center).translate([width / 2, height / 2]).scale(scale);\n              this.path = geoPath().projection(prj);\n\n              this.setState({\n                loading: false,\n                topoCounty: topoCounty,\n                topoTownship: topoTownship,\n                topoVillage: topoVillage\n              }, () => {\n                select(this.mapRef)\n                  .on('wheel', throttle(this.wheelEvent, 400));\n              })\n            })\n            .catch(err => {\n              console.log(err);\n              // Handle failure\n            });\n\n          break;\n      }\n    })\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    const { loading } = this.state;\n    const { country } = this.props;\n    if (country !== nextProps.country) {\n      this.initialMapSouces(nextProps.country)\n    }\n    if (loading !== nextState.loading) {\n      return true;\n    }\n    return false\n  }\n  componentWillMount() {\n    const { country } = this.props;\n    this.initialMapSouces(country)\n  }\n  /**\n   * 清除已選的 縣市 \n   */\n  clearSelectedCounty = () => {\n    if (this.selectedCounty.selection.length !== 0) {\n      const tmpSelectedCounty = this.selectedCounty.selection[1]\n      this.selectedCounty.selection[0]\n        .select('path')\n        .attr('stroke', 'white')\n        .attr('stroke-width', \"0.05\")\n      this.selectedCounty.selection[1]\n        .transition()\n        .duration(500)\n        .style('opacity', 0)\n        .on('end', () => {\n          tmpSelectedCounty\n            .style('display', 'none')\n            .attr('stroke', 'white')\n            .attr('stroke-width', \"0.05\");\n        });\n    }\n    if (this.selectedTown.selection.length !== 0) {\n      const tmpSelectedTown = this.selectedTown.selection[1]\n      this.selectedTown.selection[0]\n        .select('path')\n        .attr('stroke', 'white')\n        .attr('stroke-width', \"0.05\")\n      this.selectedTown.selection[1]\n        .transition()\n        .duration(500)\n        .style('opacity', 0)\n        .on('end', () => {\n          tmpSelectedTown\n            .style('display', 'none')\n            .attr('stroke', 'white')\n            .attr('stroke-width', \"0.05\");\n        });\n    }\n  }\n  /**\n   * 清除已選的 鄉鎮區\n   */\n  clearSelectedTown = () => {\n    if (this.selectedTown.selection.length !== 0) {\n      const tmpSelectedTown = this.selectedTown.selection[1]\n      this.selectedTown.selection[0]\n        .select('path')\n        .attr('stroke', 'white')\n        .attr('stroke-width', \"0.05\")\n      this.selectedTown.selection[1]\n        .transition()\n        .duration(500)\n        .style('opacity', 0)\n        .on('end', () => {\n          tmpSelectedTown\n            .style('display', 'none')\n            .attr('stroke', 'white')\n            .attr('stroke-width', \"0.05\");\n        });\n    }\n    if (this.selectedVillage.selection !== null) {\n      const tmpSelectedVillage = this.selectedVillage.selection\n      tmpSelectedVillage\n        .select('path')\n        .attr('stroke', 'white')\n        .attr('stroke-width', \"0.05\");\n    }\n  }\n  /**\n   * 清除已選的 村里\n   */\n  clearSelectedVillage = () => {\n    if (this.selectedVillage.selection !== null) {\n      const tmpSelectedVillage = this.selectedVillage.selection\n      tmpSelectedVillage\n        .select('path')\n        .attr('stroke', 'white')\n        .attr('stroke-width', \"0.05\");\n    }\n  }\n  /**\n   * 點擊 縣市 進入 鄉鎮市 Level 的 method\n   * \n   */\n  zoomInSelectedCounty = (county, animate = true) => {\n    if (county === null) {\n      return;\n    }\n    const { country } = this.props;\n    let dataCode;\n\n    this.clearSelectedCounty();\n    this.selectedCounty.element = county;\n\n    switch (country) {\n      case 'kr':\n        const { code } = county.properties;\n        dataCode = code;\n        break;\n      case 'tw':\n      default:\n        const { COUNTYCODE } = county.properties;\n        dataCode = COUNTYCODE;\n        break;\n    }\n\n    this.selectedCounty.selection[0] = select(this.mapRef)\n      .select('g.countyContainer')\n      .select(`g[data-code='${dataCode}']`);\n    this.selectedCounty.selection[1] = select(this.mapRef)\n      .select('g.townContainer')\n      .selectAll(`g[data-code^='${dataCode}']`);\n\n    this.selectedCounty.selection[0]\n      .select(function () {\n        return this.parentNode.appendChild(this)\n      })\n    this.selectedCounty.selection[0]\n      .select('path')\n      .attr('stroke', '#ffcc00')\n      .attr('stroke-width', \"0.7\");\n    this.selectedCounty.selection[1]\n      .style('display', 'block')\n      .transition()\n      .duration(500)\n      .style('opacity', 1);\n\n    this.selectedTown = {\n      selection: [],\n      element: null\n    };\n    if (animate) {\n      this.zoomAnimate(county)\n    }\n  }\n  /**\n   * 點擊 鄉鎮市 進入 村里 Level 的 method\n   *\n   */\n  zoomInSelectedTown = (town, animate = true) => {\n    if (town === null) {\n      return;\n    }\n    const { country } = this.props;\n    let dataCode;\n    this.clearSelectedTown()\n\n    this.selectedTown.element = town;\n    switch (country) {\n      case 'kr':\n        const { code } = town.properties;\n        dataCode = code;\n        break;\n      case 'tw':\n      default:\n        const { TOWNCODE } = town.properties;\n        dataCode = TOWNCODE;\n        break;\n    }\n\n    this.selectedTown.selection[0] = select(this.mapRef)\n      .select('g.townContainer')\n      .selectAll(`g[data-code='${dataCode}']`);\n    this.selectedTown.selection[1] = select(this.mapRef)\n      .select('g.villageContainer')\n      .selectAll(`g[data-code^='${dataCode}']`);\n\n    this.selectedCounty.selection[0]\n      .select('path')\n      .attr('stroke', 'white')\n      .attr('stroke-width', \"0.05\");\n    this.selectedTown.selection[0]\n      .select(function () {\n        return this.parentNode.appendChild(this)\n      });\n    this.selectedTown.selection[0]\n      .select('path')\n      .attr('stroke', '#ffcc00')\n      .attr('stroke-width', \"0.2\");\n    this.selectedTown.selection[1]\n      .style('display', 'block')\n      .transition()\n      .duration(500)\n      .style('opacity', 1);\n\n    if (animate) {\n      this.zoomAnimate(town)\n    }\n  }\n  /**\n   * 點擊 村里 的 method\n   */\n  zoomInSelectedVillage = (village) => {\n    if (village === null) {\n      return;\n    }\n\n    const { country } = this.props;\n    let dataCode;\n    this.clearSelectedVillage()\n\n    this.selectedVillage.element = village;\n    switch (country) {\n      case 'kr':\n        const { code } = village.properties;\n        dataCode = code;\n        break;\n      case 'tw':\n      default:\n        const { VILLCODE } = village.properties;\n        // if (VILLNAME === '') {\n        //   return;\n        // }\n        dataCode = VILLCODE;\n        break;\n    }\n\n    this.selectedVillage.selection = select(this.mapRef)\n      .select('g.villageContainer')\n      .selectAll(`g[data-code='${dataCode}']`);\n\n    this.selectedTown.selection[0]\n      .select('path')\n      .attr('stroke', 'white')\n      .attr('stroke-width', \"0.05\");\n    this.selectedVillage.selection\n      .select(function () {\n        return this.parentNode.appendChild(this)\n      })\n    this.selectedVillage.selection\n      .select('path')\n      .attr('stroke', '#ffcc00')\n      .attr('stroke-width', \"0.07\")\n      .transition()\n      .duration(500);\n\n  }\n  /**\n   * 處理zoom in/out animation 的 method\n   */\n  zoomAnimate = (target) => {\n    const { height, center } = this.state;\n    const bounds = this.path.bounds(target);\n    const x = (bounds[0][0] + bounds[1][0]) / 2;\n    const y = (bounds[0][1] + bounds[1][1]) / 2;\n    const vw = Math.max((bounds[1][1] - bounds[0][1]), (bounds[1][0] - bounds[0][0]));\n    const scale = (height / vw) * 0.7;\n    const translate = [center[0] - x * scale, center[1] - y * scale];\n\n    select(this.mapRef)\n      .transition()\n      .duration(750)\n      .call(this.zoom.transform, zoomIdentity.translate(translate[0], translate[1]).scale(scale));\n  }\n  /**\n   * d3 zoomEvent\n   */\n  zoomEvent = () => {\n    select(this.mapRef)\n      .selectAll('g.countyContainer, g.townContainer, g.villageContainer')\n      .attr('transform', event.transform);\n  }\n  /**\n   * Zoom Out 至初始視圖\n   */\n  zoom_fit = () => {\n    this.clearSelectedCounty();\n\n    select(this.mapRef)\n      .transition()\n      .duration(750)\n      .call(this.zoom.transform, zoomIdentity);\n\n    this.selectedCounty = {\n      selection: [],\n      element: null\n    };\n    this.selectedTown = {\n      selection: [],\n      element: null\n    };\n  }\n  /**\n   * zoom out for wheel event\n   * - auto detect current viewport level\n   */\n  zoom_out = () => {\n    if (this.selectedTown.element !== null) {\n      this.zoomInSelectedCounty(this.selectedCounty.element)\n    } else if (this.selectedCounty.element !== null) {\n      this.zoom_fit()\n    }\n  }\n  /**\n   * 滾輪 method\n   */\n  wheelEvent = () => {\n    if (event === null) {\n      return;\n    }\n    const direction = event.deltaY >= 0 ? 'down' : 'up';\n\n    if (direction === 'down') {\n      this.zoom_out()\n    }\n  }\n  /**\n   * 輸出 當下svg 為 png圖檔 並下載\n   */\n  exportToPNG = () => {\n    saveSvgAsPng(this.mapRef, 'map.png')\n  }\n  /**\n   * zoom in 至指定 縣市\n   */\n  goto_county = (code) => {\n    const { topoCounty } = this.state;\n    const { country, setSelectedInfo } = this.props;\n    let targetCounty = []\n    switch (country) {\n      case 'kr':\n        targetCounty = topoCounty.features.filter(c => c.properties.code === code);\n        break;\n      case 'tw':\n      default:\n        targetCounty = topoCounty.features.filter(c => c.properties.COUNTYCODE === code);\n        break;\n    }\n\n    setSelectedInfo('county', code);\n    this.zoomInSelectedCounty(targetCounty[0]);\n  }\n  /**\n   * zoom in 至指定 鄉鎮區\n   */\n  goto_township = (code) => {\n    const { topoCounty, topoTownship } = this.state;\n    const { country, setSelectedInfo } = this.props;\n    let targetCounty = [];\n    let targetTown = [];\n\n    switch (country) {\n      case 'kr':\n        targetCounty = topoCounty.features.filter(c => code.indexOf(c.properties.code) === 0);\n        targetTown = topoTownship.features.filter(t => t.properties.code === code);\n        break;\n      case 'tw':\n      default:\n        targetCounty = topoCounty.features.filter(c => code.indexOf(c.properties.COUNTYCODE) === 0);\n        targetTown = topoTownship.features.filter(t => t.properties.TOWNCODE === code);\n        break;\n    }\n\n    setSelectedInfo('township', code);\n    this.zoomInSelectedCounty(targetCounty[0], false);\n    this.zoomInSelectedTown(targetTown[0]);\n  }\n  /**\n   * zoom in 至指定 村里\n   */\n  goto_village = (code) => {\n    const { topoCounty, topoTownship, topoVillage } = this.state;\n    const { country, setSelectedInfo } = this.props;\n    let targetCounty = [];\n    let targetTown = [];\n    let targetVillage = [];\n\n    switch (country) {\n      case 'kr':\n        targetCounty = topoCounty.features.filter(c => code.indexOf(c.properties.code) === 0);\n        targetTown = topoTownship.features.filter(t => code.indexOf(t.properties.code) === 0);\n        targetVillage = topoVillage.features.filter(v => v.properties.code === code);\n        break;\n      case 'tw':\n      default:\n        targetCounty = topoCounty.features.filter(c => code.indexOf(c.properties.COUNTYCODE) === 0);\n        targetTown = topoTownship.features.filter(t => code.indexOf(t.properties.TOWNCODE) === 0);\n        targetVillage = topoVillage.features.filter(v => v.properties.VILLCODE === code);\n        break;\n    }\n\n    setSelectedInfo('village', code)\n    this.zoomInSelectedCounty(targetCounty[0], false);\n    this.zoomInSelectedTown(targetTown[0]);\n    this.zoomInSelectedVillage(targetVillage[0])\n  }\n  render() {\n    const { setInfo, country, setSelectedInfo } = this.props;\n    const { height, topoCounty, topoTownship, topoVillage, loading } = this.state;\n\n    if (loading) {\n      return (\n        <div>\n          <h1>載入地圖中</h1>\n        </div>\n      )\n    }\n    return (\n      <svg ref={ref => this.mapRef = ref} width={'100%'} height={height}>\n        <County\n          country={country}\n          topoData={topoCounty}\n          path={this.path}\n          setInfo={setInfo}\n          clearSelectedCounty={this.clearSelectedCounty}\n          zoomInSelectedCounty={this.zoomInSelectedCounty}\n          setSelectedInfo={setSelectedInfo}\n        />\n        <Township\n          country={country}\n          topoData={topoTownship}\n          path={this.path}\n          setInfo={setInfo}\n          clearSelectedTown={this.clearSelectedTown}\n          zoomInSelectedTown={this.zoomInSelectedTown}\n          setSelectedInfo={setSelectedInfo}\n        />\n        <Village\n          country={country}\n          topoData={topoVillage}\n          path={this.path}\n          setInfo={setInfo}\n          clearSelectedVillage={this.clearSelectedVillage}\n          zoomInSelectedVillage={this.zoomInSelectedVillage}\n          setSelectedInfo={setSelectedInfo}\n        />\n      </svg>\n    );\n  }\n}\n\nexport { MapManager };","import Map from './Map'\nimport Manager from './MapManager';\n\nconst MapManager = new Manager();\n\nexport default Map;\n\nexport { MapManager };","import { scaleLinear } from 'd3-scale';\n\nclass Manager {\n  loading = false;\n  county_data = new Map();\n  township_data = new Map();\n  village_data = new Map();\n  pathColorUpdater = new Map();\n  colorLightest = '#4da6ff';\n  colorDeepest = '#004080';\n  colorScale = scaleLinear()\n    .domain([0, 100])\n    .range([this.colorLightest, this.colorDeepest])\n    .clamp(true);\n\n  init = () => {\n    this.county_data.clear();\n    this.township_data.clear();\n    this.village_data.clear();\n    this.pathColorUpdater.clear();\n  }\n\n  onSubscribe = (code, event) => {\n    this.pathColorUpdater.set(code, event);\n  }\n\n  getData = (type, code) => {\n    switch (type) {\n      case 'county':\n        return this.county_data.get(code);\n      case 'township':\n        return this.township_data.get(code);\n      case 'village':\n        return this.village_data.get(code);\n      default:\n        return null;\n    }\n  }\n\n  setCountyData = (code, data) => {\n    this.county_data.set(code, data)\n  }\n  /**\n   * 設定 縣市 資料\n   */\n  set_county_data = (code, data) => {\n    const targetData = this.county_data.get(code);\n    if (targetData.data !== data) {\n      this.county_data.set(code, {\n        ...targetData,\n        data: data\n      })\n      const colorUpdater = this.pathColorUpdater.get(code);\n      colorUpdater(this.getColor(data))\n    }\n  }\n  /**\n   * 設定 縣市 描述\n   */\n  set_county_description = (code, data) => {\n    const targetData = this.county_data.get(code);\n    if (targetData.description !== data) {\n      this.county_data.set(code, {\n        ...targetData,\n        description: data\n      })\n    }\n  }\n\n  setTownshipData = (code, data) => {\n    this.township_data.set(code, data)\n  }\n  /**\n   * 設定 鄉鎮區 資料\n   */\n  set_township_data = (code, data) => {\n    const targetData = this.township_data.get(code);\n    if (targetData.data !== data) {\n      this.township_data.set(code, {\n        ...targetData,\n        data: data\n      })\n      const colorUpdater = this.pathColorUpdater.get(code);\n      colorUpdater(this.getColor(data))\n    }\n  }\n  /**\n   * 設定 鄉鎮區 描述\n   */\n  set_township_description = (code, data) => {\n    const targetData = this.township_data.get(code);\n    if (targetData.description !== data) {\n      this.township_data.set(code, {\n        ...targetData,\n        description: data\n      })\n    }\n  }\n  setVillageData = (code, data) => {\n    this.village_data.set(code, data)\n  }\n  /**\n   * 設定 村里 資料\n   */\n  set_village_data = (code, data) => {\n    const targetData = this.village_data.get(code);\n    if (targetData.data !== data) {\n      this.village_data.set(code, {\n        ...targetData,\n        data: data\n      })\n      const colorUpdater = this.pathColorUpdater.get(code);\n      colorUpdater(this.getColor(data))\n    }\n  }\n  /**\n   * 設定 村里 描述\n   */\n  set_village_description = (code, data) => {\n    const targetData = this.village_data.get(code);\n    if (targetData.description !== data) {\n      this.village_data.set(code, {\n        ...targetData,\n        description: data\n      })\n    }\n  }\n  /**\n   * 取得 所屬範圍的 顏色\n   */\n  getColor = (value) => {\n    return this.colorScale(value);\n  }\n  /**\n   * 設定 最淺 與 最深 的顏色\n   */\n  setColor = (min, max, lightest, deepest) => {\n    this.colorLightest = lightest;\n    this.colorDeepest = deepest;\n    this.colorScale = scaleLinear()\n      .domain([min, max])\n      .range([this.colorLightest, this.colorDeepest])\n      .clamp(true);\n    this.county_data.forEach(({ data }, key) => {\n      const colorUpdater = this.pathColorUpdater.get(key);\n      colorUpdater(this.getColor(data))\n    })\n    this.township_data.forEach(({ data }, key) => {\n      const colorUpdater = this.pathColorUpdater.get(key);\n      colorUpdater(this.getColor(data))\n    })\n    this.village_data.forEach(({ data }, key) => {\n      const colorUpdater = this.pathColorUpdater.get(key);\n      colorUpdater(this.getColor(data))\n    })\n  }\n}\n\nexport default Manager;","import React, { Component } from 'react';\nimport './App.css';\nimport { InfoModal } from './InfoModal';\nimport Map, { MapManager } from './Map/index';\n\n\nexport default class App extends Component {\n  state = {\n    info: null,\n    counties: [],\n    towns: [],\n    villages: [],\n    selectedCounty: '',\n    selectedTown: '',\n    selectedVillage: '',\n    selectedCountry: 'tw',\n    selectedInfo: {},\n    countyForm: {\n      data: '',\n      description: '',\n    },\n    townshipForm: {\n      data: '',\n      description: '',\n    },\n    villageForm: {\n      data: '',\n      description: '',\n    }\n  }\n  setInfo = (type, code) => {\n    this.setState({\n      info: MapManager.getData(type, code)\n    })\n  }\n  setDatas = ({ counties, towns, villages }) => {\n    const { country } = this.state;\n    const selectedCounty = counties[0];\n    let selectedTown = {};\n    let selectedVillage = {}\n    switch (country) {\n      case 'kr':\n        selectedTown = towns.filter(t => t.code.indexOf(selectedCounty.code) === 0)[0];\n        selectedVillage = villages.filter(v => v.code.indexOf(selectedTown.code) === 0)[0];\n        break;\n      case 'tw':\n      default:\n        selectedTown = towns.filter(t => t.code.indexOf(selectedCounty.code) === 0)[0];\n        selectedVillage = villages.filter(v => v.code.indexOf(selectedTown.code) === 0)[0]\n        break;\n    }\n\n    this.setState({\n      counties,\n      towns,\n      villages,\n      selectedCounty: JSON.stringify(selectedCounty),\n      selectedTown: JSON.stringify(selectedTown),\n      selectedVillage: JSON.stringify(selectedVillage),\n    })\n  }\n  changeCountry = () => {\n    this.setState({\n      selectedCountry: this.countrySelect.value,\n      selectedInfo: {}\n    })\n  }\n  onCountySelect = (e) => {\n    const { towns, villages } = this.state;\n    const { code } = JSON.parse(e.target.value);\n    const selectedTown = towns.filter(t => t.code.indexOf(code) === 0)[0];\n    const selectedVillage = villages.filter(v => v.code.indexOf(selectedTown.code) === 0)[0];\n\n    this.setState({\n      selectedCounty: e.target.value,\n      selectedTown: JSON.stringify(selectedTown),\n      selectedVillage: JSON.stringify(selectedVillage),\n      countyForm: {\n        data: '',\n        description: '',\n      },\n      townshipForm: {\n        data: '',\n        description: '',\n      },\n      villageForm: {\n        data: '',\n        description: '',\n      }\n    })\n  }\n  onTownSelect = (e) => {\n    const { villages } = this.state;\n    const { code } = JSON.parse(e.target.value);\n    const selectedVillage = villages.filter(v => v.code.indexOf(code) === 0)[0]\n    this.setState({\n      selectedTown: e.target.value,\n      selectedVillage: JSON.stringify(selectedVillage),\n      townshipForm: {\n        data: '',\n        description: '',\n      },\n      villageForm: {\n        data: '',\n        description: '',\n      }\n    })\n  }\n  onVillageSelect = (e) => {\n    this.setState({\n      selectedVillage: e.target.value,\n      villageForm: {\n        data: '',\n        description: '',\n      }\n    })\n  }\n  toCounty = () => {\n    const { selectedCounty } = this.state;\n    if (selectedCounty !== '') {\n      const { code } = JSON.parse(selectedCounty);\n      this.map.goto_county(code);\n\n      const { data, description } = MapManager.getData('county', code);\n\n      this.setState({\n        countyForm: {\n          data,\n          description\n        }\n      })\n    }\n  }\n  getCountyData = () => {\n    const { selectedCounty } = this.state;\n    if (selectedCounty !== '') {\n      const { code } = JSON.parse(selectedCounty);\n      const { data } = MapManager.getData('county', code)\n      alert(data);\n    }\n  }\n  setCountyData = () => {\n    const { selectedCounty } = this.state;\n    const { code } = JSON.parse(selectedCounty);\n    const data = this.countyData.value;\n    MapManager.set_county_data(code, data);\n  }\n  getCountyDescription = () => {\n    const { selectedCounty } = this.state;\n    if (selectedCounty !== '') {\n      const { code } = JSON.parse(selectedCounty);\n      const { description } = MapManager.getData('county', code)\n      alert(description);\n    }\n  }\n  setCountyDescription = () => {\n    const { selectedCounty } = this.state;\n    const { code } = JSON.parse(selectedCounty);\n    const data = this.countyDescription.value;\n    MapManager.set_county_description(code, data);\n  }\n  toTown = () => {\n    const { selectedTown } = this.state;\n    if (selectedTown !== '') {\n      const { code } = JSON.parse(selectedTown);\n      this.map.goto_township(code);\n\n      const { data, description } = MapManager.getData('township', code);\n\n      this.setState({\n        townshipForm: {\n          data,\n          description\n        }\n      })\n    }\n  }\n  getTownshipData = () => {\n    const { selectedTown } = this.state;\n    if (selectedTown !== '') {\n      const { code } = JSON.parse(selectedTown);\n      const { data } = MapManager.getData('township', code);\n      alert(data);\n    }\n  }\n  setTownshipData = () => {\n    const { selectedTown } = this.state;\n    const { code } = JSON.parse(selectedTown);\n    const data = this.townshipData.value;\n\n    MapManager.set_township_data(code, data)\n  }\n  getTownshipDescription = () => {\n    const { selectedTown } = this.state;\n    if (selectedTown !== '') {\n      const { code } = JSON.parse(selectedTown);\n      const { description } = MapManager.getData('township', code);\n      alert(description);\n    }\n  }\n  setTownshipDescription = () => {\n    const { selectedTown } = this.state;\n    const { code } = JSON.parse(selectedTown);\n    const data = this.townshipDescription.value;\n    MapManager.set_township_description(code, data)\n  }\n  toVillage = () => {\n    const { selectedVillage } = this.state;\n    if (selectedVillage !== '') {\n      const { code } = JSON.parse(selectedVillage);\n      this.map.goto_village(code);\n\n      const { data, description } = MapManager.getData('village', code);\n\n      this.setState({\n        villageForm: {\n          data,\n          description\n        }\n      })\n    }\n  }\n  getVillageData = () => {\n    const { selectedVillage } = this.state;\n    if (selectedVillage !== '') {\n      const { code } = JSON.parse(selectedVillage);\n      const { data } = MapManager.getData('village', code);\n      alert(data);\n    }\n  }\n  setVillageData = () => {\n    const { selectedVillage } = this.state;\n    const { code } = JSON.parse(selectedVillage);\n    const data = this.villageData.value;\n    MapManager.set_village_data(code, data)\n  }\n  getVillageDescription = () => {\n    const { selectedVillage } = this.state;\n    if (selectedVillage !== '') {\n      const { code } = JSON.parse(selectedVillage);\n      const { description } = MapManager.getData('village', code);\n      alert(description);\n    }\n  }\n  setVillageDescription = () => {\n    const { selectedVillage } = this.state;\n    const { code } = JSON.parse(selectedVillage);\n    const data = this.villageDescription.value;\n    MapManager.set_village_description(code, data)\n  }\n  backToTopLevel = () => {\n    this.map.zoom_fit();\n  }\n  exportToPNG = () => {\n    this.map.exportToPNG();\n  }\n  setSelectedInfo = (type, code) => {\n    switch (type) {\n      case 'county': {\n        const { name, data, description } = MapManager.getData('county', code);\n        this.setState({\n          selectedInfo: {\n            name,\n            data,\n            description,\n            code\n          },\n          countyForm: {\n            data,\n            description\n          }\n        });\n        break;\n      }\n      case 'township': {\n        const { name, data, description } = MapManager.getData('township', code);\n        this.setState({\n          selectedInfo: {\n            name,\n            data,\n            description,\n            code\n          },\n          townshipForm: {\n            data,\n            description\n          }\n        });\n        break;\n      }\n      case 'village': {\n        const { name, data, description } = MapManager.getData('village', code);\n        this.setState({\n          selectedInfo: {\n            name,\n            data,\n            description,\n            code\n          },\n          villageForm: {\n            data,\n            description\n          }\n        });\n        break;\n      }\n      default:\n        break;\n    }\n  }\n  setDefatValue = (type, code) => {\n\n    switch (type) {\n      case 'county': {\n        const { data, description } = MapManager.getData('county', code);\n        this.setState({\n          countyForm: {\n            data,\n            description\n          }\n        });\n        break;\n      }\n      case 'township': {\n        const { data, description } = MapManager.getData('township', code);\n        this.setState({\n          townshipForm: {\n            data,\n            description\n          }\n        });\n        break;\n      }\n      case 'village': {\n        const { data, description } = MapManager.getData('village', code);\n        this.setState({\n          villageForm: {\n            data,\n            description\n          }\n        });\n        break;\n      }\n      default:\n        break;\n    }\n  }\n  setColor = () => {\n    if (this.deepestColor.value !== '' || this.lightestColor.value !== '' || this.min.value !== '' || this.max.value !== '') {\n      MapManager.setColor(this.min.value, this.max.value, this.lightestColor.value, this.deepestColor.value)\n    } else {\n      alert('請正確填入所有相關值');\n    }\n  }\n  render() {\n    const {\n      info,\n      counties,\n      towns,\n      villages,\n      selectedCounty,\n      selectedTown,\n      selectedVillage,\n      selectedInfo,\n      selectedCountry,\n      countyForm,\n      townshipForm,\n      villageForm\n    } = this.state;\n    return (\n      <div className=\"App\">\n        <div style={{ flex: 2 }}>\n          <Map\n            ref={ref => this.map = ref}\n            country={selectedCountry}\n            setInfo={this.setInfo}\n            setDatas={this.setDatas}\n            setSelectedInfo={this.setSelectedInfo}\n            setDefatValue={this.setDefatValue}\n          />\n        </div>\n        <div style={{ flex: 1 }}>\n          <div>\n            <div className=\"controller\">\n              <select\n                name=\"country\"\n                id=\"selectCountry\"\n                ref={ref => this.countrySelect = ref}\n                defaultValue={selectedCountry}\n              >\n                <option value=\"tw\">台灣</option>\n                <option value=\"kr\">韓國</option>\n              </select>\n              <input type=\"button\" onClick={this.changeCountry} value=\"確認\" />\n            </div>\n            <div className='controller'>\n              <div>\n                <select\n                  name=\"county\"\n                  id=\"selectCounty\"\n                  ref={ref => this.countySelect = ref}\n                  onChange={this.onCountySelect}\n                  value={selectedCounty}\n                >\n                  {\n                    counties.map((c, i) => <option key={c.code} value={JSON.stringify(c)}>{c.name}</option>)\n                  }\n                </select>\n                <input type=\"button\" onClick={this.toCounty} value=\"傳送\" />\n                <input type=\"button\" onClick={this.getCountyData} value=\"取得資料\" />\n                <input type=\"button\" onClick={this.getCountyDescription} value=\"取得描述\" />\n              </div>\n              <div>\n                <input type=\"text\" ref={ref => this.countyData = ref} defaultValue={countyForm.data} />\n                <input type=\"button\" onClick={this.setCountyData} value=\"設定資料\" />\n              </div>\n              <div>\n                <input type=\"text\" ref={ref => this.countyDescription = ref} defaultValue={countyForm.description} />\n                <input type=\"button\" onClick={this.setCountyDescription} value=\"設定描述\" />\n              </div>\n            </div>\n            <div className='controller'>\n              <div>\n                <select\n                  name=\"town\"\n                  id=\"selectTown\"\n                  ref={ref => this.townSelect = ref}\n                  onChange={this.onTownSelect}\n                  value={selectedTown}\n                >\n                  {\n                    towns.map(t => {\n                      const { name, code } = t;\n                      const scounty = JSON.parse(selectedCounty);\n                      if (t.code.indexOf(scounty.code) === 0) {\n                        return (\n                          <option key={code} value={JSON.stringify(t)}>{name}</option>\n                        )\n                      }\n                      return null;\n                    })\n                  }\n                </select>\n                <input type=\"button\" onClick={this.toTown} value=\"傳送\" />\n                <input type=\"button\" onClick={this.getTownshipData} value=\"取得資料\" />\n                <input type=\"button\" onClick={this.getTownshipDescription} value=\"取得描述\" />\n              </div>\n              <div>\n                <input type=\"text\" ref={ref => this.townshipData = ref} defaultValue={townshipForm.data} />\n                <input type=\"button\" onClick={this.setTownshipData} value=\"設定資料\" />\n              </div>\n              <div>\n                <input type=\"text\" ref={ref => this.townshipDescription = ref} defaultValue={townshipForm.description} />\n                <input type=\"button\" onClick={this.setTownshipDescription} value=\"設定描述\" />\n              </div>\n            </div>\n            <div className='controller'>\n              <div>\n                <select\n                  name=\"village\"\n                  id=\"selectVillage\"\n                  ref={ref => this.villageSelect = ref}\n                  onChange={this.onVillageSelect}\n                  value={selectedVillage}\n                >\n                  {\n                    villages.map(v => {\n                      const { name, code } = v;\n                      const stown = JSON.parse(selectedTown);\n                      if ((v.code.indexOf(stown.code) === 0) && name !== '') {\n                        return (\n                          <option key={code} value={JSON.stringify(v)}>{name}</option>\n                        )\n                      }\n                      return null;\n                    })\n                  }\n                </select>\n                <input type=\"button\" onClick={this.toVillage} value=\"傳送\" />\n                <input type=\"button\" onClick={this.getVillageData} value=\"取得資料\" />\n                <input type=\"button\" onClick={this.getVillageDescription} value=\"取得描述\" />\n              </div>\n              <div>\n                <input type=\"text\" ref={ref => this.villageData = ref} defaultValue={villageForm.data} />\n                <input type=\"button\" onClick={this.setVillageData} value=\"設定資料\" />\n              </div>\n              <div>\n                <input type=\"text\" ref={ref => this.villageDescription = ref} defaultValue={villageForm.description} />\n                <input type=\"button\" onClick={this.setVillageDescription} value=\"設定描述\" />\n              </div>\n            </div>\n            <div className=\"controller\">\n              <div>\n                <div>\n                  <input type=\"number\" ref={ref => this.min = ref} placeholder='最大值' />\n                  <input type=\"number\" ref={ref => this.max = ref} placeholder='最小值' />\n                </div>\n                <div>\n                  <input type=\"text\" ref={ref => this.lightestColor = ref} placeholder='最淺顏色' />\n                  <input type=\"text\" ref={ref => this.deepestColor = ref} placeholder='最深顏色' />\n                </div>\n                <input type=\"button\" onClick={this.setColor} value=\"設定顏色\" />\n              </div>\n            </div>\n            <div>\n              <input type=\"button\" value=\"回到最上層\" onClick={this.backToTopLevel} />\n            </div>\n            <div>\n              <input type=\"button\" value=\"儲存PNG圖檔\" onClick={this.exportToPNG} />\n            </div>\n            {\n              Object.keys(selectedInfo).length !== 0 ? (\n                <div className='controller'>\n                  <p>名稱： {selectedInfo.name}</p>\n                  <p>Code： {selectedInfo.code}</p>\n                  <p>資料： {selectedInfo.data}</p>\n                  <p>描述： {selectedInfo.description}</p>\n                </div>\n              ) : null\n            }\n          </div>\n          <InfoModal info={info} />\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}